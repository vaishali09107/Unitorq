{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport imagesloaded from 'imagesloaded';\nimport Isotope from 'isotope-layout';\nimport { flatDeep } from \"../utils\";\n\nconst useMasonry = (portfolioData, masonryListWrap, masonryGrid, btnWrap, btn) => {\n  _s();\n\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    const mixCategories = portfolioData.map(item => {\n      return item.categories.map(cat => cat);\n    });\n    const allCat = flatDeep(mixCategories, Infinity);\n    const commonCategories = [...new Set(allCat)];\n    setCategories(commonCategories); // This for Images\n\n    const masonryList = document.querySelector(masonryListWrap);\n    imagesloaded(masonryList, () => {\n      const projectItems = masonryList.querySelectorAll(masonryGrid);\n      let start = 1;\n\n      while (start < projectItems.length) {\n        projectItems[start].classList.add('grid-width-2');\n        start += 4;\n      }\n\n      let Iso = new Isotope(masonryList, {\n        itemSelector: masonryGrid\n      });\n      const filterWrap = document.querySelector(btnWrap);\n      const filterItems = document.querySelectorAll(btn);\n      filterItems.forEach(filterItem => {\n        filterItem.addEventListener('click', e => {\n          const filterCate = filterItem.dataset.filter;\n          filterWrap.querySelector('.is-checked').classList.remove('is-checked');\n          e.target.classList.add('is-checked');\n          Iso.arrange({\n            filter: filterCate\n          });\n        });\n      });\n    });\n  }, []);\n  return {\n    categories\n  };\n};\n\n_s(useMasonry, \"+ijgB8ROEl0Dkz53OTIi8GynN6s=\");\n\nexport default useMasonry;","map":{"version":3,"names":["useEffect","useState","imagesloaded","Isotope","flatDeep","useMasonry","portfolioData","masonryListWrap","masonryGrid","btnWrap","btn","categories","setCategories","mixCategories","map","item","cat","allCat","Infinity","commonCategories","Set","masonryList","document","querySelector","projectItems","querySelectorAll","start","length","classList","add","Iso","itemSelector","filterWrap","filterItems","forEach","filterItem","addEventListener","e","filterCate","dataset","filter","remove","target","arrange"],"sources":["/Users/parthchavhan/Desktop/exomac-business-react-js-template-2023-11-27-05-26-00-utc/exomac/src/hooks/use-masonry.js"],"sourcesContent":["import {useEffect, useState} from 'react';\r\nimport imagesloaded from 'imagesloaded';\r\nimport Isotope from 'isotope-layout';\r\nimport {flatDeep} from \"../utils\";\r\n\r\nconst useMasonry = (portfolioData, masonryListWrap, masonryGrid, btnWrap, btn) => {\r\n    const [categories, setCategories] = useState([]);\r\n    useEffect(() => {\r\n        const mixCategories = portfolioData.map(item => {\r\n            return item.categories.map(cat => cat)\r\n        })\r\n        const allCat = flatDeep(mixCategories, Infinity);\r\n        const commonCategories = [...new Set(allCat)];\r\n        \r\n        setCategories(commonCategories);\r\n\r\n        \r\n\r\n        // This for Images\r\n        const masonryList = document.querySelector(masonryListWrap);\r\n        imagesloaded(masonryList, () => {\r\n            const projectItems = masonryList.querySelectorAll(masonryGrid);\r\n            let start = 1;\r\n            while (start < projectItems.length) {\r\n                projectItems[start].classList.add('grid-width-2');\r\n                start += 4;\r\n            }\r\n            let Iso = new Isotope(masonryList, {\r\n                itemSelector: masonryGrid\r\n            });\r\n\r\n            const filterWrap = document.querySelector(btnWrap)\r\n            const filterItems = document.querySelectorAll(btn);\r\n            filterItems.forEach((filterItem) => {\r\n                filterItem.addEventListener('click', (e) => {\r\n                    const filterCate = filterItem.dataset.filter;\r\n                    filterWrap.querySelector('.is-checked').classList.remove('is-checked');\r\n                    e.target.classList.add('is-checked');\r\n                    Iso.arrange({\r\n                        filter: filterCate\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }, []);\r\n    return {categories}\r\n}\r\n\r\nexport default useMasonry\r\n"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAAQC,QAAR,QAAuB,UAAvB;;AAEA,MAAMC,UAAU,GAAG,CAACC,aAAD,EAAgBC,eAAhB,EAAiCC,WAAjC,EAA8CC,OAA9C,EAAuDC,GAAvD,KAA+D;EAAA;;EAC9E,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;EACAD,SAAS,CAAC,MAAM;IACZ,MAAMa,aAAa,GAAGP,aAAa,CAACQ,GAAd,CAAkBC,IAAI,IAAI;MAC5C,OAAOA,IAAI,CAACJ,UAAL,CAAgBG,GAAhB,CAAoBE,GAAG,IAAIA,GAA3B,CAAP;IACH,CAFqB,CAAtB;IAGA,MAAMC,MAAM,GAAGb,QAAQ,CAACS,aAAD,EAAgBK,QAAhB,CAAvB;IACA,MAAMC,gBAAgB,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQH,MAAR,CAAJ,CAAzB;IAEAL,aAAa,CAACO,gBAAD,CAAb,CAPY,CAWZ;;IACA,MAAME,WAAW,GAAGC,QAAQ,CAACC,aAAT,CAAuBhB,eAAvB,CAApB;IACAL,YAAY,CAACmB,WAAD,EAAc,MAAM;MAC5B,MAAMG,YAAY,GAAGH,WAAW,CAACI,gBAAZ,CAA6BjB,WAA7B,CAArB;MACA,IAAIkB,KAAK,GAAG,CAAZ;;MACA,OAAOA,KAAK,GAAGF,YAAY,CAACG,MAA5B,EAAoC;QAChCH,YAAY,CAACE,KAAD,CAAZ,CAAoBE,SAApB,CAA8BC,GAA9B,CAAkC,cAAlC;QACAH,KAAK,IAAI,CAAT;MACH;;MACD,IAAII,GAAG,GAAG,IAAI3B,OAAJ,CAAYkB,WAAZ,EAAyB;QAC/BU,YAAY,EAAEvB;MADiB,CAAzB,CAAV;MAIA,MAAMwB,UAAU,GAAGV,QAAQ,CAACC,aAAT,CAAuBd,OAAvB,CAAnB;MACA,MAAMwB,WAAW,GAAGX,QAAQ,CAACG,gBAAT,CAA0Bf,GAA1B,CAApB;MACAuB,WAAW,CAACC,OAAZ,CAAqBC,UAAD,IAAgB;QAChCA,UAAU,CAACC,gBAAX,CAA4B,OAA5B,EAAsCC,CAAD,IAAO;UACxC,MAAMC,UAAU,GAAGH,UAAU,CAACI,OAAX,CAAmBC,MAAtC;UACAR,UAAU,CAACT,aAAX,CAAyB,aAAzB,EAAwCK,SAAxC,CAAkDa,MAAlD,CAAyD,YAAzD;UACAJ,CAAC,CAACK,MAAF,CAASd,SAAT,CAAmBC,GAAnB,CAAuB,YAAvB;UACAC,GAAG,CAACa,OAAJ,CAAY;YACRH,MAAM,EAAEF;UADA,CAAZ;QAGH,CAPD;MAQH,CATD;IAUH,CAvBW,CAAZ;EAwBH,CArCQ,EAqCN,EArCM,CAAT;EAsCA,OAAO;IAAC3B;EAAD,CAAP;AACH,CAzCD;;GAAMN,U;;AA2CN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}