{"ast":null,"code":"/**\n * Isotope LayoutMode\n */\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['get-size/get-size', 'outlayer/outlayer'], factory);\n  } else if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('get-size'), require('outlayer'));\n  } else {\n    // browser global\n    window.Isotope = window.Isotope || {};\n    window.Isotope.LayoutMode = factory(window.getSize, window.Outlayer);\n  }\n})(window, function factory(getSize, Outlayer) {\n  'use strict'; // layout mode class\n\n  function LayoutMode(isotope) {\n    this.isotope = isotope; // link properties\n\n    if (isotope) {\n      this.options = isotope.options[this.namespace];\n      this.element = isotope.element;\n      this.items = isotope.filteredItems;\n      this.size = isotope.size;\n    }\n  }\n\n  var proto = LayoutMode.prototype;\n  /**\n   * some methods should just defer to default Outlayer method\n   * and reference the Isotope instance as `this`\n  **/\n\n  var facadeMethods = ['_resetLayout', '_getItemLayoutPosition', '_manageStamp', '_getContainerSize', '_getElementOffset', 'needsResizeLayout', '_getOption'];\n  facadeMethods.forEach(function (methodName) {\n    proto[methodName] = function () {\n      return Outlayer.prototype[methodName].apply(this.isotope, arguments);\n    };\n  }); // -----  ----- //\n  // for horizontal layout modes, check vertical size\n\n  proto.needsVerticalResizeLayout = function () {\n    // don't trigger if size did not change\n    var size = getSize(this.isotope.element); // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n\n    var hasSizes = this.isotope.size && size;\n    return hasSizes && size.innerHeight != this.isotope.size.innerHeight;\n  }; // ----- measurements ----- //\n\n\n  proto._getMeasurement = function () {\n    this.isotope._getMeasurement.apply(this, arguments);\n  };\n\n  proto.getColumnWidth = function () {\n    this.getSegmentSize('column', 'Width');\n  };\n\n  proto.getRowHeight = function () {\n    this.getSegmentSize('row', 'Height');\n  };\n  /**\n   * get columnWidth or rowHeight\n   * segment: 'column' or 'row'\n   * size 'Width' or 'Height'\n  **/\n\n\n  proto.getSegmentSize = function (segment, size) {\n    var segmentName = segment + size;\n    var outerSize = 'outer' + size; // columnWidth / outerWidth // rowHeight / outerHeight\n\n    this._getMeasurement(segmentName, outerSize); // got rowHeight or columnWidth, we can chill\n\n\n    if (this[segmentName]) {\n      return;\n    } // fall back to item of first element\n\n\n    var firstItemSize = this.getFirstItemSize();\n    this[segmentName] = firstItemSize && firstItemSize[outerSize] || // or size of container\n    this.isotope.size['inner' + size];\n  };\n\n  proto.getFirstItemSize = function () {\n    var firstItem = this.isotope.filteredItems[0];\n    return firstItem && firstItem.element && getSize(firstItem.element);\n  }; // ----- methods that should reference isotope ----- //\n\n\n  proto.layout = function () {\n    this.isotope.layout.apply(this.isotope, arguments);\n  };\n\n  proto.getSize = function () {\n    this.isotope.getSize();\n    this.size = this.isotope.size;\n  }; // -------------------------- create -------------------------- //\n\n\n  LayoutMode.modes = {};\n\n  LayoutMode.create = function (namespace, options) {\n    function Mode() {\n      LayoutMode.apply(this, arguments);\n    }\n\n    Mode.prototype = Object.create(proto);\n    Mode.prototype.constructor = Mode; // default options\n\n    if (options) {\n      Mode.options = options;\n    }\n\n    Mode.prototype.namespace = namespace; // register in Isotope\n\n    LayoutMode.modes[namespace] = Mode;\n    return Mode;\n  };\n\n  return LayoutMode;\n});","map":{"version":3,"names":["window","factory","define","amd","module","exports","require","Isotope","LayoutMode","getSize","Outlayer","isotope","options","namespace","element","items","filteredItems","size","proto","prototype","facadeMethods","forEach","methodName","apply","arguments","needsVerticalResizeLayout","hasSizes","innerHeight","_getMeasurement","getColumnWidth","getSegmentSize","getRowHeight","segment","segmentName","outerSize","firstItemSize","getFirstItemSize","firstItem","layout","modes","create","Mode","Object","constructor"],"sources":["/Users/parthchavhan/Desktop/exomac-business-react-js-template-2023-11-27-05-26-00-utc/exomac/node_modules/isotope-layout/js/layout-mode.js"],"sourcesContent":["/**\n * Isotope LayoutMode\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n        'get-size/get-size',\n        'outlayer/outlayer'\n      ],\n      factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('get-size'),\n      require('outlayer')\n    );\n  } else {\n    // browser global\n    window.Isotope = window.Isotope || {};\n    window.Isotope.LayoutMode = factory(\n      window.getSize,\n      window.Outlayer\n    );\n  }\n\n}( window, function factory( getSize, Outlayer ) {\n  'use strict';\n\n  // layout mode class\n  function LayoutMode( isotope ) {\n    this.isotope = isotope;\n    // link properties\n    if ( isotope ) {\n      this.options = isotope.options[ this.namespace ];\n      this.element = isotope.element;\n      this.items = isotope.filteredItems;\n      this.size = isotope.size;\n    }\n  }\n\n  var proto = LayoutMode.prototype;\n\n  /**\n   * some methods should just defer to default Outlayer method\n   * and reference the Isotope instance as `this`\n  **/\n  var facadeMethods = [\n    '_resetLayout',\n    '_getItemLayoutPosition',\n    '_manageStamp',\n    '_getContainerSize',\n    '_getElementOffset',\n    'needsResizeLayout',\n    '_getOption'\n  ];\n\n  facadeMethods.forEach( function( methodName ) {\n    proto[ methodName ] = function() {\n      return Outlayer.prototype[ methodName ].apply( this.isotope, arguments );\n    };\n  });\n\n  // -----  ----- //\n\n  // for horizontal layout modes, check vertical size\n  proto.needsVerticalResizeLayout = function() {\n    // don't trigger if size did not change\n    var size = getSize( this.isotope.element );\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var hasSizes = this.isotope.size && size;\n    return hasSizes && size.innerHeight != this.isotope.size.innerHeight;\n  };\n\n  // ----- measurements ----- //\n\n  proto._getMeasurement = function() {\n    this.isotope._getMeasurement.apply( this, arguments );\n  };\n\n  proto.getColumnWidth = function() {\n    this.getSegmentSize( 'column', 'Width' );\n  };\n\n  proto.getRowHeight = function() {\n    this.getSegmentSize( 'row', 'Height' );\n  };\n\n  /**\n   * get columnWidth or rowHeight\n   * segment: 'column' or 'row'\n   * size 'Width' or 'Height'\n  **/\n  proto.getSegmentSize = function( segment, size ) {\n    var segmentName = segment + size;\n    var outerSize = 'outer' + size;\n    // columnWidth / outerWidth // rowHeight / outerHeight\n    this._getMeasurement( segmentName, outerSize );\n    // got rowHeight or columnWidth, we can chill\n    if ( this[ segmentName ] ) {\n      return;\n    }\n    // fall back to item of first element\n    var firstItemSize = this.getFirstItemSize();\n    this[ segmentName ] = firstItemSize && firstItemSize[ outerSize ] ||\n      // or size of container\n      this.isotope.size[ 'inner' + size ];\n  };\n\n  proto.getFirstItemSize = function() {\n    var firstItem = this.isotope.filteredItems[0];\n    return firstItem && firstItem.element && getSize( firstItem.element );\n  };\n\n  // ----- methods that should reference isotope ----- //\n\n  proto.layout = function() {\n    this.isotope.layout.apply( this.isotope, arguments );\n  };\n\n  proto.getSize = function() {\n    this.isotope.getSize();\n    this.size = this.isotope.size;\n  };\n\n  // -------------------------- create -------------------------- //\n\n  LayoutMode.modes = {};\n\n  LayoutMode.create = function( namespace, options ) {\n\n    function Mode() {\n      LayoutMode.apply( this, arguments );\n    }\n\n    Mode.prototype = Object.create( proto );\n    Mode.prototype.constructor = Mode;\n\n    // default options\n    if ( options ) {\n      Mode.options = options;\n    }\n\n    Mode.prototype.namespace = namespace;\n    // register in Isotope\n    LayoutMode.modes[ namespace ] = Mode;\n\n    return Mode;\n  };\n\n  return LayoutMode;\n\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}